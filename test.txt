* Guava
http://blog.outsider.ne.kr/710

* Test annotaion 코드 규칙3가지 

* 작성코드를 그림으로 표현해보기 

* Collection Framework  
http://withwani.tistory.com/150

 . List V, L.L, A.L
 . Map  H.T, H.M, S.H.M - T.M
 . Set  H.S, S.H.S      - T.S
 . sync를 보장 
 
 HashMap에서는 해시 충돌을 방지하기 위하여 Open Addressing이고, 다른 하나는 Separate Chaining 
 (보조 해시 함수 : 확인필요 ) 를 사용한다는 것, 

Open Addressing은 데이터를 삽입하려는 해시 버킷이 이미 사용 중인 경우 다른 해시 버킷에 해당 데이터를 삽입하는 방식이다. 데이터를 저장/조회할 해시 버킷을 찾을 때에는 Linear Probing, Quadratic Probing 등의 방법을 사용한다.

Separate Chaining에서 각 배열의 인자는 인덱스가 같은 해시 버킷을 연결한 링크드 리스트의 첫 부분(head)이다.

둘 모두 Worst Case O(M)이다. 하지만 Open Addressing은 연속된 공간에 데이터를 저장하기 때문에 Separate Chaining에 비하여 캐시 효율이 높다. 따라서 데이터 개수가 충분히 적다면 Open Addressing이 Separate Chaining보다 더 성능이 좋다. 하지만 배열의 크기가 커질수록(M 값이 커질수록) 캐시 효율이라는 Open Addressing의 장점은 사라진다. 배열의 크기가 커지면, L1, L2 캐시 적중률(hit ratio)이 낮아지기 때문이다.
 
 http://d2.naver.com/content/images/2015/06/helloworld-831311-4.png
 
 Java 8에서는 Separate Chaining에서 링크드 리스트 대신 트리를 사용하기도 한다는 것, 
 그리고 String 클래스의 hashCode() 메서드에서 31을 승수로 사용하는 이유는 성능 향상 도모를 위한 것이라고 정리할 수 있다.
 
* Linked List : node=vertax=element : add

* Mybatis : Sqlsession : SqlSessionFactory : SqlSessionFactory.builder
   http://www.mybatis.org/spring/ko/sqlsession.html
   
	JPA N+1쿼리 문제
	글로벌 페치 전략을 EAGER로 변경하면?
	
	단일 엔터티 조회 시 (ex. OrderRepository.findOne() )에는 
	글로벌 페치 전략을 EAGER로 변경하면 JOIN을 통해 실제 실행되는 쿼리 수를 줄일 수 있다.
	
	하지만, 글로벌 페치 전략은 JPQL 실행 시 (ex. OrderRepository.findAll() )에는 
	적용되지 않는다.
	즉, JPQL 실행 시 N + 1 쿼리 문제는 EAGER Fetch로는 해결되지 않는다.
	
	1 Fetch Join 사용
		MultipleBagFetchException 발생: 컬렉션 타입을 List -> Set으로 변경
	2 글로벌 페치 전략 - LAZY 사용
		@OneToOne, @ManyToOne : EAGER
		@OneToMany, @ManyToMany : LAZY
	3 OSIV 적용
		글로벌 페치 전략을 LAZY로 변경하면, 영속성 컨텍스트를 벗어나서 
		Lazy Loading 시도 시 LazyInitializationException이 발생
		-> OSIV를 적용을 통해 해결

* Lombok : 
  Slf4j, annotation : data, getter, setter, AllArgsConstructor, NoArgsConstructor, ToString 

* Java8 
  Funtional interface 
  Consumer<T>, Function<T,R>, Predicate<T>, Supplier<T> : Lazy evaluation 

* Bean Scope : singleton, request, session, prototype

* String, Stringbuffer, Stringbuiller
  immutable, mmutable  
           Thread Safe

	mutable과 immutable pattern
	우선 이 두 개념을 간단하게 보자. 공유 자원들은 사용시 thread safety(multi-thread safety)해야 올바른 결과를 보장할 수 있다. 그래서 immutable은 한번 만든 객체는 변경되지 않으며, 변경시에는 새로운 객체를 만든다. 이 말은 synchronized하지 않아도 thread safety하다는 뜻이다. mutable은 원본 자체를 수정해야하기 때문에 synchronized해야만 올바른 결과가 보장된다.
	 
	String Class
	 이 녀석은 immutable한 클래스이다. 변경 불가능한 클래스라는 뜻이다. 하지만 안의 메소드(toLowerCase(), trim()... 등등)를 생각해보면 자칫 변경가능한 녀석이라고 생각할 수 있다. 하지만 실제론 안에서 원본 객체는 놔둔채 각메서드에서 새로운 객체를 만들어 기능을 처리한 후 반환한다. 즉, 원본은 변경되지 않는 것이다. 그래서 String 클래스는 객체를 새로 할당하는 시간 및 새로운 메모리사용 때문에 다른 문자열 클래스에 비해 좀 더 느리다고 생각될 수 있다.
	 
	StringBuffer Class
	 이 녀석은 mutable하다. 그러니까 가지고 있는 원본을 수정할 수 있도록 만든 Class이다. 당연 thread safety하기 위한 synchronized과정이 있다. 이 synchronized과정에 있어서 단순한 참조를 할경우 String보다 bad performance를 보인다.
	 
	StringBuilder Class
	 이 녀석 또한 mutable하다. StringBuffer와 동일한 기능을 갖고있는데 차이점이라고 한다면 thread safety하지 않다. 즉, synchronized 과정이 없다는 것 이다. 그래서 thread safety할 필요 없는 코드라면 stringBuffer가 아닌 StringBuilder를 써야 더 좋은 performance가 나온다.

             
* IO inputstream berfferedstream fileinputstream  : IO : 데코레이션패턴
      타깃에 부가적인 기능을 런타임 시 다이나믹하게 부여해주기 위해서 프록시를 사용하는 패턴 데코레이터 패턴

* Spring AOP
  JDK 다아나믹 프록시 --> FactoryBean implement --> proxyFactoryBean 
  advisor = advice(부가기능), pointcut(메서드 선정 알고리즘), MethodInvocation

   DefaultAdvisorAutoProxyCreator 클래스빈등록 ID없다.빈의 후처리기로 참여  
 
   pointcut 표현식을 위해서 필요한 class AspectJExpressionPointcut

AspectJ 표현식 샘플 
"execution(* *..TargetInterface.*(..))"
"execution(* *..Tar*.*(..))"
"execution(* *(..) throws Runtime*)"
AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();
		pointcut.setExpression(expression);
		
		assertThat(pointcut.getClassFilter().matches(clazz) &&
				   pointcut.getMethodMatcher().matches(
						   clazz.getMethod(methodName, args), null), 
				   is(expected));

spring
bean(*Service)	
@annotation(org .springframework .transaction .annotation.Transactional)			   


DefaultTransactionDefinition Class 
- Transaction PROPAGATION (REQUIRED, REQUIRES_NEW, NOT SUPPORTED)
- isolation level (ISOLATION_DEFAULT
- timeout
- read only

Transactionlnterceptor 
TransactionAttribute를 Properties
  PROPAGATION_NAME, ISOLATION_NAME, readOnly , timeout_NNNN, -Exceptionl , +Exception2

@Transactional 어노테이션의 대체 fallback 정책
(1)
public interface Service{
	(2)
	void method1();
	(3)
	void method2();
}

(4)
public class ServiceImpl implements Service{
	(5)
	public void method1(){...}
	(6)
	public void method2(){...}
}

* Exception의 두가지형태 
  checked / unchecked Exception 
  checked exception은 컴파일러가 체크하는 익셉션이고,
  unchecked exception은 컴파일러가 체크하지 않는 익셉션입니다. 

다시 말해서 checked exception은 try 문으로 처리하거나 메서드 선언에 throws 절을 써야 컴파일 에러가 발생하지 않고,
unchecked exception은 그렇게 하지 않아도 컴파일 에러가 발생하지 않습니다.
http://cfile28.uf.tistory.com/image/217C6B4552AF12B432A3FF

* OOM 대처방안 혹은 처리했던 경험
  http://opennaru.tistory.com/84

* JVM 설명

* GC설명 

JDK8에선 PermGen이 완전히 사라지고 Metaspace가 이를 대신 함.
http://goo.gl/wA4tkJ

Young 영역(Yong Generation 영역)
	새롭게 생성한 객체의 대부분이 여기에 위치한다. 
	대부분의 객체가 금방 접근 불가능 상태가 되기 때문에 매우 많은 객체가 Young 영역에 생성되었다가 사라진다. 
	이 영역에서 객체가 사라질때 Minor GC가 발생한다고 말한다.
Old 영역(Old Generation 영역)
	접근 불가능 상태로 되지 않아 Young 영역에서 살아남은 객체가 여기로 복사된다. 
	대부분 Young 영역보다 크게 할당하며, 크기가 큰 만큼 Young 영역보다 GC는 적게 발생한다. 
	이 영역에서 객체가 사라질 때 Major GC(혹은 Full GC)가 발생한다고 말한다.

위 그림의 Permanent Generation 영역(이하 Perm 영역)은 Method Area라고도 한다. 
객체나 억류(intern)된 문자열 정보를 저장하는 곳이며, Old 영역에서 살아남은 객체가 영원히 남아 있는 곳은 절대 아니다. 
이 영역에서 GC가 발생할 수도 있는데, 여기서 GC가 발생해도 Major GC의 횟수에 포함된다.

Old 영역에 대한 GC
Old 영역은 기본적으로 데이터가 가득 차면 GC를 실행한다. 
GC 방식에 따라서 처리 절차가 달라지므로, 어떤 GC 방식이 있는지 살펴보면 이해가 쉬울 것이다. 
GC 방식은 JDK 7을 기준으로 5가지 방식이 있다.

Serial GC
Parallel GC
Parallel Old GC(Parallel Compacting GC)
Concurrent Mark & Sweep GC(이하 CMS)
G1(Garbage First) GC
이 중에서 운영 서버에서 절대 사용하면 안 되는 방식이 Serial GC다. 
Serial GC는 데스크톱의 CPU 코어가 하나만 있을 때 사용하기 위해서 만든 방식이다. 
Serial GC를 사용하면 애플리케이션의 성능이 많이 떨어진다.

http://d2.naver.com/helloworld/1329

* stream 
  ㄴ intermediate operation 
  ㄴ terminal operation 

* algorithms
Asymptotic notation
Recursive algorithms

Binary search
 오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 알고리즘이다. 
처음 중간의 값을 임의의 값으로 선택하여, 그 값과 찾고자 하는 값의 크고 작음을 비교하는 방식을 채택하고 있다. 
처음 선택한 중앙값이 만약 찾는 값보다 크면 그 값은 새로운 최고값이 되며, 작으면 그 값은 새로운 최하값이 된다. 
검색 원리상 정렬된 리스트에만 사용할 수 있다는 단점이 있지만, 
검색이 반복될 때마다 목표값을 찾을 확률은 두 배가 되므로 속도가 빠르다는 장점이 있다. 
이진 검색은 분할 정복 알고리즘의 한 예이다.

Selection sort
Insertion sort
Merge sort
Quick sort

* singleton 코드
public TestClass {
	/*유일한 인스턴스 저장 객체 선언*/
	private static TestClass _instance ;
	private TestClass(){ }

	/*외부에서 사용할 함수 선언 클래스를 생성할떄 쓴다 */
	public static Singleton getInstanceDC() { 
		if (_instance == null) { // Single Checked 
			synchronized (Singleton.class) { 
				if (_instance == null) { // Double checked 
					_instance = new Singleton(); 
				} 
			} 
		} return _instance; 
	}
}

*  HTTP Method	의미 	 
 POST	Create 	 
 GET	Select 	 
 PUT	 Create or Update	 
 DELETE	Delete 	 

REST를 정리하면 HTTP URI + HTTP Method 이다. URI로 대상 자원을 명시하고 Method로 해당 자원에 대한 행위를 정의

REST의 가장 큰 특징중의 하나가 모든 자원을 Resource 즉 자원으로 표현한다는 것이다. 이 Resource는 HTTP URL에 의해서 표현된다. 예를 들어 javastudy 사이트의 bcho 라는 사용자를 표현하면  http://www.javastudy.co.kr/users/bcho 로 표현이 가능하고, 서울 강남구 사무실의 9층의 HP프린터를 표현할때는 http://printers/localtion/seoul/kangnamgu/9f/hp 식으로 표현을 한다. 이로써 HTTP URI를 통해서 모든 Resource를 표현이 가능하다. 

* DB Test

* zookeeper 용도
주키퍼는 하둡 클러스터와 직접적인 관련은 없습니다. 
기능 및 용도 관점에 보자면 주키퍼는 일종의 파일 락 서비스를 제공하기 때문에 
분산 클러스터 환경에서 여러 서비스 간의 코디네이터 역할이 필요할 때 사용합니다. 

보통 단일 서버에서 멀티 스레드 프로그래밍을 할 때 스레드 간의 동기화나 코디네이션을 위해 컨디션 락 같은 걸 사용하는데, 
분산 환경에서도 여러 노드에서 수행되는 작업들간의 동기화나 코디네이션을 위해 전체 클러스터의 락을 제어하기 위한 시스템이 필요합니다. 

주키퍼는 바로 이런 분산 환경에서 컨디션 락이 제공하는 것과 유사한 API를 제공하기 때문에 여러 노드 간의 경쟁을 제어할 수 있습니다. 

예전에는 메시지 큐나 DB를 이용했지만 메시지 큐나 DB는 해당 장비가 장애가 날 경우 전체 서비스에 치명적인 문제가 있는데, 
주키퍼는 복수 개의 서버로 구성된 non master/slave 구조의 자체 클러스터로 되어 있으며 
paxos algorithm 이라는 컨센서스 알고리즘을 써서 주키퍼 노드 들간의 정보를 동기화하기 때문에 
매우 높은 수준의 fault tolerance 를 제공합니다.


* flume
Flume은 Log aggregator 즉 로그 수집기입니다. 수많은 서버에 분산되어 있는 많은 양의 로그 데이터를 
flume을 통해서 한 곳(기본적으로는 HDFS)으로 모을 수 있도록 해줍니다. 
